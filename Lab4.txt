Vilka avvikelser från MVC-idealet kan ni identifiera i det ursprungliga användargränssnittet? Vad borde ha gjorts smartare, dummare eller tunnare?

Smartare: Separera Model helt från View och Controller så att modellen är oberoende av användargränssnittet.
Dummare: Låt View bara visa uppdaterad information för användaren istället för att innehålla logik.
Tunnare: Flytta logik, data och metoder från Controller till en separat modellklass för data, tillstånd och domänlogik.
View är kopplad till både CarController och DrawPanel, vilket suddar ut gränserna mellan View och Controller.
DrawPanel innehåller logik som borde ligga i modellen.
Vilka av dessa brister åtgärdade ni med er nya design i del 3? Hur då? Vilka brister åtgärdade ni inte?

Åtgärdade:

Flyttade mycket data (ArrayList<Car> och AutoRepairShop) till en ny klass “Entities”, som fungerar som en början till en modellklass. Detta tunnade ut CarController.
Skapade “CarInputHandler” som en början till en renodlad Controller-klass, samt “CarMover” för att ytterligare avlasta CarController.

Ej åtgärdade:

Modellen är fortfarande inte helt separerad från View och Controller.
Mycket logik finns kvar i CarController och View, vilket borde flyttas till modellen.
DrawPanel innehåller fortfarande logik som hör hemma i modellen och borde ingå i View-lagret.
CarController kan göras ännu tunnare genom att flytta mer logik till modellen.
Main-funktionen ligger fortfarande i CarController men bör placeras i en separat klass.

3.
OBSERVER-PATTERN
I den nya designen har vi implementerat en observer och en button observer, som används för att bryta den täta kopplingen mellan Controller, View och Model. Genom att låta Controller agera som en button observer av View kan den
registrera knapptryckningar utan att vara direkt beroende av View. Genom att sedan låta DrawPanel (del av View) vara en observer av Model får vi en svagare koppling mellan Model och View.

FACTORY METHOD
Den nya designen implementerar en factory för att skapa olika entiteter som bilar och AutoRepairShop. Detta mönster underlättar processen av att lägga till och ta bort bilar i applikationen. Detta förbättrar även OCP,
eftersom nya bilar kan introduceras utan att modifiera befintlig kod.

STATE
State-mönstret ingår inte i vår nuvarande design, men det kan vara relevant om man vill särskilja beteendet när bilarna är i rörelse från när de står stilla. Till exempel kan en truck ha två tillstånd, 
"moving" och "still", där vissa funktioner endast är aktiva i det stillastående läget. Detta skulle kunna öka programmets robusthet.

COMPOSITE
I CarController hanteras funktioner som gas, broms och start gemensamt för alla fordon, vilket antyder ett composite-liknande mönster. Dock är det oklart om detta verkligen uppfyller definitionen av composite-mönstret, 
som traditionellt är kopplat till trädstrukturer.

5.
Factory method visade sig vara mycket relevant för denna implementering.


